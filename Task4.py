# См. файл Task4.1_script.py

#2 Представлен список чисел.
# Необходимо вывести элементы исходного списка,
# значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор

def sort_list(basic_list):
    # генерируем значение под индексом от 0 до длины списка, если выполняется условие
    return [basic_list[x] for x in range(1, len(basic_list)) if basic_list[x] > basic_list[x-1]]

basic_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
print(sort_list(basic_list))

#3 Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.
print([x for x in range(20, 240) if (x % 20) == 0 or (x % 21) == 0])

#4. Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

def repeating_numbers(basic_list):
    return [x for x in basic_list if basic_list.count(x) <= 1]

basic_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
print(repeating_numbers(basic_list))

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().
from functools import reduce

list = [x for x in range(100, 1000, 2)]
print(reduce(lambda x,y: x*y,list))

# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
from itertools import count, cycle
start_number = int(input('Enter start number: '))
print("Next number - enter, q - quit ")
for num in count(start_number):
    print(num)
    if input() == 'q':
        break
print("Finish")

# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Необходимо предусмотреть условие его завершения.

my_list = input('Enter numbers splited by spaces: ').split()
print("Next number - enter, quit - q ")
itterator = cycle(my_list)
in_progress = True
while in_progress:
    print(next(itterator))
    if input().lower() == 'q':
        in_progress = False
print("Finish")

#7 Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом:
# for el in fact(n). Функция отвечает за получение факториала числа,
# а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

def fact(num):
    factorial = 1
    for num in range(1, num+1):
        factorial *= num
        yield factorial

n = int(input("Enter number: "))
for el in fact(n):
    print(el)

